package com.labatlas.atlas.test.dcclient;

import com.labatlas.atlas.server.MessagePackFilter;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketException;
import java.text.DecimalFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.apache.mina.transport.nio.NioTcpClient;

/**
 *
 * @author Hwaipy
 */
public class DCSupplyFrame extends javax.swing.JFrame {

  private NioTcpClient client;
  private final MessageClientHandler handler;

  /**
   * Creates new form DCSupplyFrame
   *
   * @throws java.lang.Exception
   */
  public DCSupplyFrame() throws Exception {
    initComponents();
    handler = new MessageClientHandler("PC Center", this);
    new Thread(new Runnable() {

      @Override
      public void run() {
        try {
          int messagePort = 20101;
          int broadcastPort = 20151;

          ServerSeeker serverSeeker = new ServerSeeker(new InetSocketAddress("192.168.1.255", broadcastPort));
          InetAddress address = serverSeeker.seek();

          client = new NioTcpClient();
          client.setFilters(new MessagePackFilter());
          client.setIoHandler(handler);
          client.connect(new InetSocketAddress(address, messagePort));
        } catch (SocketException ex) {
          Logger.getLogger(DCSupplyFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | InterruptedException ex) {
          Logger.getLogger(DCSupplyFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }).start();
    new Timer(100, new ActionListener() {

      @Override
      public void actionPerformed(ActionEvent e) {
        updateDisplay();
      }
    }).start();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();
    jToggleButtonAlice = new javax.swing.JToggleButton();
    jToggleButtonBob = new javax.swing.JToggleButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Pockels Cell Controller");

    jTextArea1.setColumns(20);
    jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
    jTextArea1.setRows(5);
    jScrollPane1.setViewportView(jTextArea1);

    jToggleButtonAlice.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
    jToggleButtonAlice.setText("Alice PC");
    jToggleButtonAlice.setEnabled(false);
    jToggleButtonAlice.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jToggleButtonAliceActionPerformed(evt);
      }
    });

    jToggleButtonBob.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
    jToggleButtonBob.setText("Bob PC");
    jToggleButtonBob.setEnabled(false);
    jToggleButtonBob.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jToggleButtonBobActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jToggleButtonAlice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jToggleButtonBob, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jToggleButtonAlice, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jToggleButtonBob, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 165, Short.MAX_VALUE))
          .addComponent(jScrollPane1))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jToggleButtonAliceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonAliceActionPerformed
    pockelsCellOnOff(0, jToggleButtonAlice);
  }//GEN-LAST:event_jToggleButtonAliceActionPerformed

  private void jToggleButtonBobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonBobActionPerformed
    pockelsCellOnOff(2, jToggleButtonBob);
  }//GEN-LAST:event_jToggleButtonBobActionPerformed
  private void pockelsCellOnOff(final int deviceIndex, final JToggleButton associatedButtion) {
    final boolean turnOn = associatedButtion.isSelected();
    associatedButtion.setEnabled(false);
    new Thread(new Runnable() {

      @Override
      public void run() {
        if (turnOn) {
          handler.pockelsCellOn(deviceIndex);
        } else {
          handler.pockelsCellOff(deviceIndex);
        }
        SwingUtilities.invokeLater(new Runnable() {

          @Override
          public void run() {
            associatedButtion.setEnabled(true);
          }
        });
      }
    }).start();
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
      Logger.getLogger(DCSupplyFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        try {
          new DCSupplyFrame().setVisible(true);
        } catch (Exception ex) {
          Logger.getLogger(DCSupplyFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    });
  }

  public void setReady() {
    jToggleButtonAlice.setEnabled(true);
    jToggleButtonBob.setEnabled(true);
  }

  private long[] updateTime = new long[]{System.currentTimeMillis(), System.currentTimeMillis(), System.currentTimeMillis(), System.currentTimeMillis()};
  private double[][] voltages = new double[4][3];
  private double[][] currents = new double[4][3];
  boolean[] online = new boolean[4];

  public void updateStatus(int id, List<Double> voltages, List<Double> currents) {
    updateTime[id] = System.currentTimeMillis();
    for (int i = 0; i < 3; i++) {
      this.voltages[id][i] = voltages.get(i);
      this.currents[id][i] = currents.get(i);
    }
  }

  private void updateDisplay() {
    long time = System.currentTimeMillis();
    boolean allOnline = true;
    for (int i = 0; i < this.online.length; i++) {
      this.online[i] = (time - updateTime[i]) < 3000;
      allOnline &= this.online[i];
    }
    StringBuilder sb = new StringBuilder();
    sb.append("Alice").append(System.lineSeparator())
            .append(generateDisplayString(0, 0, "HV Driver")).append(System.lineSeparator())
            .append(generateDisplayString(0, 1, "HV Supply")).append(System.lineSeparator())
            .append(generateDisplayString(0, 2, "QRNG     ")).append(System.lineSeparator())
            .append(generateDisplayString(1, 0, "Cooler   ")).append(System.lineSeparator())
            .append(System.lineSeparator())
            .append("Bob").append(System.lineSeparator())
            .append(generateDisplayString(2, 0, "HV Driver")).append(System.lineSeparator())
            .append(generateDisplayString(2, 1, "HV Supply")).append(System.lineSeparator())
            .append(generateDisplayString(2, 2, "QRNG     ")).append(System.lineSeparator())
            .append(generateDisplayString(3, 0, "Cooler   ")).append(System.lineSeparator());
    jTextArea1.setText(sb.toString());
    boolean warning = !allOnline;
    jTextArea1.setForeground(warning ? Color.RED : Color.BLACK);
  }
  private DecimalFormat decimalFormat = new DecimalFormat("00.000");

  private String generateDisplayString(int deviceID, int channel, String name) {
    StringBuilder sb = new StringBuilder();
    sb.append(name).append(":  ");
    if (online[deviceID]) {
      double voltage = voltages[deviceID][channel];
      double current = currents[deviceID][channel];
      sb.append(decimalFormat.format(voltage)).append(" V,  ").append(decimalFormat.format(current)).append(" A");
      return sb.toString();
    } else {
      sb.append("Offline");
      return sb.toString();
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea jTextArea1;
  private javax.swing.JToggleButton jToggleButtonAlice;
  private javax.swing.JToggleButton jToggleButtonBob;
  // End of variables declaration//GEN-END:variables
}
