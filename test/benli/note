
##print(my_instrument.query("READ?"))
##my_instrument.write("MEASure")
##my_instrument.write("SENSe:CORRection:WAVelength 900")   rm = visa.ResourceManager()



'''
rm = visa.ResourceManager()
instIDs=rm.list_resources()
print(instIDs)
##choose=int(input("Choose your instrument(begin with 1): "))
choose=1
my_instrument = rm.open_resource(instIDs[choose-1])
print(my_instrument)
print(my_instrument.write("*RST"))
print(my_instrument.query("*IDN?"))
print(my_instrument.query("SYSTem:TIME?"))
print(my_instrument.query("SENSe:CORRection:WAVelength?"))
##print(my_instrument.query("SENSe:CORRection:POWer?"))
print(my_instrument.query("SENSe:POWer:UNIT?"))
print(my_instrument.query("SENSe:POWer:RANGe:AUTO?"))
print('--------------')
print(time.time())
##for i in range(100):
    print(my_instrument.query("MEASure?"))
    #time.sleep(10000)
print(time.time())
print(my_instrument.query("MEASure?"))
print(my_instrument.query("MEASure?"))
print(my_instrument.query("READ?"))
print(my_instrument.query("READ?"))
print(my_instrument.query("READ?"))
##print(my_instrument.write("SENSe:AVERage 100"))
my_instrument.write("INITiate")
##my_instrument.write("ABORt")
time.sleep(0.4)
time.sleep(0.1)
print(my_instrument.query("FETCh?"))
time.sleep(0.1)
print(my_instrument.query("FETCh?"))
time.sleep(0.1)
print(my_instrument.query("FETCh?"))

'''

'''
def init_PM():
    rm = visa.ResourceManager()
    instIDs=rm.list_resources()
    print(instIDs)
    ##choose=int(input("Choose your instrument(begin with 1): "))
    choose=1
    my_instrument=PM200(instIDs[choose-1])
    print(my_instrument.getIdentity())
    my_instrument.rest()
    print(my_instrument.getWavelength())
    #my_instrument.confirmDevice()
    #my_instrument.setLineFrequency()
    #print(my_instrument.getSensorInfo())
    my_instrument.setbeamdiameter(1)
    my_instrument.setdefaultbeamdiameter()
    print(my_instrument.getbeamdiameter())
    #print(my_instrument.getFrequency())
    print(my_instrument.getAveragingRate())
    my_instrument.setAveragingRate(1)
    print(my_instrument.getAveragingRate())
    print(time.time())
    #my_instrument.rest()
    print(my_instrument.measure())

    print(time.time())
    my_instrument.onBandwidthFilter()
    print(my_instrument.getbandwidth())
    print(my_instrument.isAutoRange())
    my_instrument.setAutoRange(1)
    print(my_instrument.isAutoRange())
    my_instrument.setMeasureRange_at_W(0.002)
    print(my_instrument.getMeasureRange_at_W())
    #my_instrument.setAutoRange(1)

'''






    instIDs=rm.list_resources()
    my_instrument= rm.open_resource(instIDs[1])

    def query(cmd):
        my_instrument.query(cmd)


class PM200:

    def __init__(self,id):
        self.id = id
        self.rm = visa.ResourceManager().open_resource(id)

    def getIdentity(self):
        return self.rm.query('*IDN?')

    def getWavelength(self):
        wl = self.rm.query('SENSE:CORRECTION:WAVELENGTH?')
        return float(wl)

    def setWavelength(self,wavelength):
        self.rm.write('SENSE:CORRECTION:WAVELENGTH {}'.format(wavelength))

    def isAutoRange(self):
        return self.rm.query('SENSE:POWER:DC:RANGE:AUTO?')

    def setAutoRange(self,status):
        self.rm.write('SENSE:POWER:DC:RANGE:AUTO {}'.format(1 if status else 0))

    def measure(self):
        return float(self.rm.query('read?')[:-1])



def measureLoop():
    for i in range(3600*24*365):
        time.sleep(1)
        pA = pmA.measure()
        pB = pmB.measure()
        contrast = pA/pB
        print('{}--------{}-----------{}'.format(pA,pB,contrast))
        file = open(fileName,'a')
        file.write('{},{},{},{}\n'.format(time.time(),pA,pB,contrast))
        file.close()

def update_line(num, data, line):
    pA = pmA.measure()
    pB = pmB.measure()
    contrast = pA/pB
    print('{}--------{}-----------{}'.format(pA,pB,contrast))
    file = open(fileName,'a')
    file.write('{},{},{},{}\n'.format(time.time(),pA,pB,contrast))
    file.close()
    print(data)
    line.set_data(data[..., :num])
    return line,

if __name__ == '__main__':
    print('go')
#    print(listResources())
#    sys.exit(0)
    fileName = '../data/data{}.txt'.format(time.time())
    print(fileName)
    pmA = PM100(ID_PM200_A)
    pmA.setWavelength(805)
    pmA.setAutoRange(True)
    pmB = PM100(ID_PM200_B)
    pmB.setWavelength(805)
    pmB.setAutoRange(True)
    measureLoop()